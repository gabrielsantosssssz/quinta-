package matricula_maven;

import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.stream.Collectors;

public class CadastroAlunoGUI {
    private AlunoDAO alunoDAO = new AlunoDAO();
    private JFrame frame;
    private JTextArea areaAlunos;
    private JTextField campoBusca;
    private String turmaSelecionada = "Turma A";

    public CadastroAlunoGUI() {
        frame = new JFrame("Cadastro de Alunos");
        frame.setSize(700, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new BorderLayout(10, 10));

        // Painel lateral com botões centralizados
        JPanel painelBotoes = new JPanel();
        painelBotoes.setLayout(new BoxLayout(painelBotoes, BoxLayout.Y_AXIS));
        String[] nomesBotoes = {"Cadastrar Aluno", "Listar Alunos", "Remover Aluno", "Selecionar Turma", "Sair"};

        for (String nome : nomesBotoes) {
            JButton btn = new JButton(nome);
            btn.setAlignmentX(Component.CENTER_ALIGNMENT);
            painelBotoes.add(Box.createVerticalStrut(10));
            painelBotoes.add(btn);

            switch (nome) {
                case "Cadastrar Aluno":
                    btn.addActionListener(e -> cadastrarAluno());
                    break;
                case "Listar Alunos":
                    btn.addActionListener(e -> listarAlunos());
                    break;
                case "Remover Aluno":
                    btn.addActionListener(e -> removerAluno());
                    break;
                case "Selecionar Turma":
                    btn.addActionListener(e -> selecionarTurma());
                    break;
                case "Sair":
                    btn.addActionListener(e -> fecharAplicacao());
                    break;
            }
        }

        // Campo de busca na parte superior
        JPanel painelBusca = new JPanel(new BorderLayout());
        campoBusca = new JTextField();
        JButton botaoBuscar = new JButton("Buscar");
        painelBusca.add(campoBusca, BorderLayout.CENTER);
        painelBusca.add(botaoBuscar, BorderLayout.EAST);

        botaoBuscar.addActionListener(e -> buscarAlunos());

        // Área de exibição dos alunos
        areaAlunos = new JTextArea();
        areaAlunos.setEditable(false);
        areaAlunos.setFont(new Font("Monospaced", Font.PLAIN, 14));
        JScrollPane scroll = new JScrollPane(areaAlunos);

        // Layout final
        frame.add(painelBusca, BorderLayout.NORTH);
        frame.add(scroll, BorderLayout.CENTER);
        frame.add(painelBotoes, BorderLayout.WEST);

        frame.setVisible(true);
    }

    private void cadastrarAluno() {
        String nome = JOptionPane.showInputDialog(frame, "Nome do aluno:");
        String matricula = JOptionPane.showInputDialog(frame, "Matrícula:");
        String dataNascimento = JOptionPane.showInputDialog(frame, "Data de Nascimento:");

        String[] opcoesTurma = {"Turma A", "Turma B", "Turma C", "Turma D"};
        String turma = (String) JOptionPane.showInputDialog(frame, "Selecione a turma:", "Turma", JOptionPane.PLAIN_MESSAGE, null, opcoesTurma, opcoesTurma[0]);

        if (nome != null && matricula != null && dataNascimento != null && turma != null &&
                !nome.trim().isEmpty() && !matricula.trim().isEmpty() && !dataNascimento.trim().isEmpty()) {
            alunoDAO.inserir(new Aluno(nome, matricula, dataNascimento, turma));
            JOptionPane.showMessageDialog(frame, "Aluno cadastrado com sucesso na " + turma + "!");
        } else {
            JOptionPane.showMessageDialog(frame, "Todos os campos são obrigatórios.");
        }
    }

    private void listarAlunos() {
        List<Aluno> alunos = alunoDAO.listar().stream()
                .filter(a -> a.turma.equals(turmaSelecionada))
                .collect(Collectors.toList());

        exibirAlunos(alunos);
    }

    private void buscarAlunos() {
        String termo = campoBusca.getText().trim().toLowerCase();
        List<Aluno> alunosFiltrados = alunoDAO.listar().stream()
                .filter(a -> a.turma.equals(turmaSelecionada) &&
                        (a.nome.toLowerCase().contains(termo) || a.matricula.toLowerCase().contains(termo)))
                .collect(Collectors.toList());

        exibirAlunos(alunosFiltrados);
    }

    private void exibirAlunos(List<Aluno> alunos) {
        StringBuilder sb = new StringBuilder();

        if (alunos.isEmpty()) {
            sb.append("Nenhum aluno cadastrado na ").append(turmaSelecionada).append(".\n");
        } else {
            for (Aluno a : alunos) {
                sb.append("Matrícula: ").append(a.matricula).append(" | ")
                  .append("Nome: ").append(a.nome).append(" | ")
                  .append("Nascimento: ").append(a.dataNascimento).append(" | ")
                  .append("Turma: ").append(a.turma).append("\n");
            }
        }

        areaAlunos.setText(sb.toString());
    }

    private void removerAluno() {
        String matricula = JOptionPane.showInputDialog(frame, "Digite a matrícula do aluno:");
        if (matricula != null && !matricula.trim().isEmpty()) {
            boolean removido = alunoDAO.removerPorMatricula(matricula);
            if (removido) {
                JOptionPane.showMessageDialog(frame, "Aluno removido com sucesso.");
            } else {
                JOptionPane.showMessageDialog(frame, "Aluno não encontrado.");
            }
        }
    }

    private void selecionarTurma() {
        String[] opcoes = {"Turma A", "Turma B", "Turma C", "Turma D"};
        String turma = (String) JOptionPane.showInputDialog(frame, "Selecione a turma:", "Turma", JOptionPane.PLAIN_MESSAGE, null, opcoes, turmaSelecionada);
        if (turma != null) {
            turmaSelecionada = turma;
            JOptionPane.showMessageDialog(frame, "Turma selecionada: " + turmaSelecionada);
        }
    }

    private void fecharAplicacao() {
        int confirm = JOptionPane.showConfirmDialog(frame, "Deseja realmente sair?", "Sair", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(CadastroAlunoGUI::new);
    }
}
